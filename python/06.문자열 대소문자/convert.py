text = input("영어 대소문자로 이루어진 문장을 입력하세요.")

print('\n모두  대문자로 변경\n' + text.upper())     # 대문자로 변환

print('\n모두 소문자로 변경\n' + text.lower())     # 소문자로 변환
# 신규 문자열형 변수
new_text = str()

for c in text:

    if c.islower():
        new_text += c.upper()                       # 대문자로 변경하여 신규 문자열에 붙이기
    else:
        new_text += c.lower()                       # 소문자로 변경하여 신규 문자열에 붙이기

print('\nfor문과 if문 사용하여 대소문자 변경\n' + new_text)

print('\n소스코드 한 줄로 대소문자 변경\n' + text.swapcase())
            
# 1행 : 표준 출력문을 이용하여 영어로 된 대소문자의 입력을 요청합니다.
# 인자 값으로 들어간 문자열은 입력 받을 때 출력이 되는 문자열이며, 마지막 부분에 개행문자인 '\n'
# 을 넣어 다음 행에서 입력 받을 수 있게 하였습니다.
# 개행 문자는 Enter를 누른 것과 같은 역할을 합니다.

# 3행 : 입력 받은 문자를 모두 대문자로 바꾸기 위해 문자열형 메소드인 upper()를 사용합니다.

# 5행 : 입력 받은 문자를 모두 소문자로 바꾸기 위해 문자열형 메소드인 lower()를 사용합니다.

# 7행 : 대소문자를 변경한 새로운 문자를 담기 위한 변수를 선언하며, 문자열 초기화 함수인 str()을 사용합니다.

# 9행 : for문을 사용합니다. 문자열형 데이터는 그 자체로도 문자로 이루어진 열거 데이터이고, "for c in text"와 같이 문자열을
# in의 대상으로 삼고 있는 것을 확인할 수 있습니다. 이 구문은 문자열의 각 문자를 c에 담아서 루프를 수행하게 됩니다.

# 11행 : 해당 문자 c의 소문자 유무를 확인하기 위해 문자열형 메소드인 islower()를 호출합니다. islower() 반환 값 자체가 논리형(Boolean, True 또는 False)
# 이기 때문에 등호와 같이 값을 비교하는 구문은 보이지 않고 함수만 논리식에 들어갑니다.

# 12행 : 해당 문자가 소문자인 경우 실행되며, 대문자로 변경한 뒤 새로 만든 문자열형 변수인 new_text에 더해집니다.
# 이때, "new_text += c.upper()"는 "new_text = new_text + c.upper()"와 같은 의미로, new_text의 끝에 값이 더해지기 위한 연산자로 '+='를 사용합니다.

# 13행 : '대문자이면'을 의미합니다.

# 14행 : 대문자를 소문자로 변경하여 new_text에 해당 문자를 저장하고 있습니다.

# 16행 : for루프가 끝난 후 완성된 문자를 출력해주고 있습니다.

# 18행 : 방금 전에 수행한 대소문자 변경을 문자열형 메소드인 swapcase()를 통해 수행한 결과를 출력하고 있습니다.
# 9~16행까지 수행한 소스코드의 결과와 동일합니다.
