Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # 숫자 타입과 연산자
>>> 
>>> type(100)
<class 'int'>
>>> type(123.0)
<class 'float'>
>>> 
>>> # 정수 타입과 실수 타입의 데이터 정보
>>> 
>>> 
>>> # 기본 연산자
>>> 243 + 792
1035
>>> 10000 - 1035
8965
>>> 500 * 243
121500
>>> 100 * 792
79200
>>> 500 * 243 + 100 * 792
200700
>>> (500 * 243) + (100 * 792)
200700
>>> # 위 두개는 같은 결과
>>> 
>>> 
>>> # 500원 짜리 동전의 비율
>>> 121500 / 200700
0.6053811659192825
>>>  # 약 60%
 
>>> # 정수 타입의 숫자로 나누었지만 결과는 실수 타입으로 나오는 것은 파이선의 특징
>>> 
>>> # 소수점 자릿수 반올림 : round() 함수
>>> round(121500 / 200700, 2) # 2는 표기하고 싶은 소수점 자리수 -> 3번째 자리 반올림
0.61
>>> # 나눗셈의 몫과 나머지 산출 연산자
>>> # 파이선에서 몫을 반환하는 연산자는 2개의 빗금 기호(//)이며, 나머지 연산자는 백분율 기호(%)입니다.
>>> 
>>> # 500원짜리 401개로 바꾸고 나머지 200원은 100원짜리 2개로 바꾸면 최소 개수의 동전이 구해짐
>>> 200700 / 500
401.4
>>> 200700 // 500
401
>>> 200700 % 500
200
>>> 
>>> # 변수와 대입 연산자
>>> # 연산을 수행한 결과를 변수에 저장하고 출력할 수 있다.
>>> total_count = 243 + 792
>>> total_price = (500 * 243) + (100 * 792)
>>> 
>>> print(total_count)
1035
>>> print(total_price)
200700
>>> # 이퀄(=)을 대입 연산자라고 부른다. 우측 결과를 좌측 변수에 '대입' 하는 것
>>> 
>>> # 여러 개의 변수에 같은 값을 대입할 수 있다.
>>> total_count = 243 + 792
>>> init_count = final_count = total_count
>>> print(total_count)
1035
>>> print(init_count)
1035
>>> print(final_count)
1035
>>> # 전체 개수가 저장된 변수에 하나를 더하는 예시
>>> print('초기 개수 : ', final_count)
초기 개수 :  1035
>>> final_count = final_count + 1
>>> print(final_count)
1036
>>> 
>>> # 복합 연산자
>>> final_count += 1
>>> print('증가 후 개수 : ', final_count)
증가 후 개수 :  1037
>>> 
>>> # '100'는 문자열이므로 서로 다른 데이터를 더하는 것은 불가능 하다.
>>> 100 + '100'
Traceback (most recent call last):
  File "<pyshell#58>", line 1, in <module>
    100 + '100'
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> 
>>> # 파이선 기본 내장함수 int()
>>> # 데이터 타입 바꾸기
>>> 100 + int('100')
200
>>> # 문자열을 정수로 변환
>>> 
>>> # 정수를 문자열로 변환 (str은 String.)
>>> str(100) + '100'
'100100'
>>> 